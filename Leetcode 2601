class Solution {
public:
    vector<int> sieveof(int n) {
        vector<bool> is_prime(n + 1, true);
        is_prime[0] = is_prime[1] = false;

        for (int i = 2; i * i <= n; i++) {
            if (is_prime[i]) {
                for (int j = i * i; j <= n; j += i) {
                    is_prime[j] = false;
                }
            }
        }

        vector<int> primes;
        for (int i = 2; i <= n; i++) {
            if (is_prime[i]) {
                primes.push_back(i);
            }
        }
        return primes;
    }

    bool primeSubOperation(vector<int>& nums) {
        int max_val = *max_element(nums.begin(), nums.end());  
        vector<int> primes = sieveof(max_val);

        for (int i = 0; i < nums.size(); i++) {
            int diff = (i == 0) ? nums[0] - 1 : nums[i] - nums[i - 1] - 1;
            int lower = lower_bound(primes.begin(), primes.end(), diff) - primes.begin();

            if (lower == primes.size() || primes[lower] > diff) {
                lower--;
            }

            if (lower < 0) {
                if (i == 0 || nums[i] > nums[i - 1]) {
                    continue;
                } else {
                    return false;
                }
            }

            nums[i] -= primes[lower];
        }
        return true;
    }
};
